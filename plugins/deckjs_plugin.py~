# plugins/deckjs_plugin.py

import os
import pypandoc
import frontmatter
from flask import Blueprint, send_from_directory, current_app, url_for, abort
from werkzeug.utils import safe_join

# --- Configuration ---
DECKJS_BLUEPRINT_NAME = 'deckjs_plugin'

# --- Blueprint for serving the generated decks ---
deckjs_bp = Blueprint(
    DECKJS_BLUEPRINT_NAME,
    __name__
)

# --- Helper Functions ---
def get_deck_path(app_instance, page_name):
    """Gets the full path to a generated deck HTML file."""
    # Ensure DECKS_DIR is configured in config.py
    decks_dir = app_instance.config.get('DECKS_DIR')
    if not decks_dir:
        app_instance.logger.error("DeckJS Plugin: DECKS_DIR is not configured in config.py!")
        return None
    return safe_join(decks_dir, page_name + '.html')

# --- Core Logic ---
def generate_deck(page_name, **kwargs):
    """
    Converts a page's Markdown file to a standalone deck.js HTML file.
    This function now accepts keyword arguments from the hook.
    """
    # Extract the required arguments from kwargs
    source_file_path = kwargs.get('file_path')
    app_context = kwargs.get('app_context', current_app)    

    if not source_file_path:
        app_context.logger.error("DeckJS Plugin: 'file_path' not provided to generate_deck hook.")
        return

    app_context.logger.info(f"DeckJS Plugin: Generating deck for '{page_name}'.")
    

    deck_output_path = get_deck_path(app_context, page_name)
    if not deck_output_path:
        return # Error already logged

    # Create the cache directory if it doesn't exist
    os.makedirs(os.path.dirname(deck_output_path), exist_ok=True)

    try:
        # Load the article to get the title from the frontmatter
        with open(source_file_path, 'r', encoding='utf-8') as f:
            article = frontmatter.load(f)
        
        page_title = article.metadata.get('title', page_name.title())


        # --- FIX: Clean the macro from the content ---
        article.content = article.content.replace('~~DECKJS~~', '')
        
        # --- FIX: Re-assemble the full document as a string with frontmatter ---
        full_document_string = frontmatter.dumps(article)

        template_path = os.path.join(app_context.root_path, 'templates', 'deckjs-pandoc.html')
        
        # Define Pandoc arguments for deck.js conversion
        # We use a custom template to link to local deck.js assets.
        pandoc_args = [
            '--to=revealjs',
            '--standalone',        # Create a full HTML file
            '--slide-level=2',     # H2 headings start new slides
            '--variable', f'title:{page_title}',
            f'--template={template_path}' # Custom template in templates folder
        ]
        
        # Convert the text
        pypandoc.convert_text(
            full_document_string,
            'revealjs',
            extra_args=pandoc_args,
            outputfile=deck_output_path
        )
        app_context.logger.info(f"DeckJS Plugin: Successfully created deck at {deck_output_path}")

    except Exception as e:
        app_context.logger.error(f"DeckJS Plugin: Failed to generate deck for '{page_name}': {e}", exc_info=True)

def delete_deck(page_name, app_context):
    """Deletes the generated deck.js HTML file for a page."""
    deck_path = get_deck_path(app_context, page_name)
    if deck_path and os.path.exists(deck_path):
        try:
            os.remove(deck_path)
            app_context.logger.info(f"DeckJS Plugin: Deleted deck for '{page_name}'.")
        except Exception as e:
            app_context.logger.error(f"DeckJS Plugin: Failed to delete deck for '{page_name}': {e}")


# --- Route to Serve the Generated HTML ---
@deckjs_bp.route('/decks/<path:page_name>.html')
def serve_deck(page_name):
    # For security, one might add an ACL check here to ensure the user
    # has 'view_page' permission for the original page before serving the deck.
    decks_dir = current_app.config.get('DECKS_DIR')
    if not decks_dir:
        abort(500, "Deck directory not configured.")
    
    # Check if the file exists before trying to serve it
    if not os.path.exists(os.path.join(decks_dir, page_name + '.html')):
        abort(404, "This presentation has not been generated yet.")

    return send_from_directory(decks_dir, page_name + '.html')


# --- Macro Processing ---
def process_deckjs_macro(markdown_content, current_page_slug, **kwargs):
    if '~~DECKJS~~' not in markdown_content:
        return markdown_content

    app_context = kwargs.get('app_context', current_app)
    deck_path = get_deck_path(app_context, current_page_slug)
    
    if deck_path and os.path.exists(deck_path):
        deck_url = url_for(f'{DECKJS_BLUEPRINT_NAME}.serve_deck', page_name=current_page_slug)
        replacement_md = f'<p class="deckjs-link"><a href="{deck_url}" target="_blank" rel="noopener noreferrer">Slides</a></p>'
    else:
        replacement_md = '<p class="deckjs-link"><em>Presentation not yet generated. Please save the page again.</em></p>'
        
    return markdown_content.replace('~~DECKJS~~', replacement_md)


# --- Plugin Registration ---
def register(app, register_hook):
    # Register the blueprint
    app.register_blueprint(deckjs_bp)

    # Register hooks
    register_hook('after_page_save', generate_deck)
    register_hook('after_page_delete', delete_deck)
    register_hook('process_page_macros', process_deckjs_macro)

    # Check for DECKS_DIR on startup
    if not app.config.get('DECKS_DIR'):
        app.logger.error("DeckJS Plugin is active, but DECKS_DIR is not set in config.py. Decks will not be generated.")
    else:
        # Create the directory on startup if it doesn't exist.
        os.makedirs(app.config['DECKS_DIR'], exist_ok=True)
    
    app.logger.info("Deck.js presentation plugin registered.")
